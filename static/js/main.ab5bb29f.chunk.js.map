{"version":3,"sources":["features/plotParams/plotParamsSlice.ts","app/hooks.ts","views/Sidebar.tsx","views/DataViews.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["AddPrinMode","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","balance","intRate","remMoPmt","addPrinMode","PRIN_PERCENT","addPrinPct","addPrinAmt","cmpToBase","plotParamsSlice","createSlice","name","reducers","setBalance","state","action","payload","setIntRate","setRemMoPmts","setAddPrinMode","setAddPrinPct","setAddPrinAmt","setCmpToBase","actions","selectPlotParams","plotParams","selectBalance","selectIntRate","selectRemMoPmts","selectCmpToBase","selectMinMonthlyPmt","params","moInt","Math","pow","assessAddlPrincipal","basePmtVals","addlPmt","Object","assign","addlPrin","STATIC","principal","PMT_PERCENT","interest","endBalance","startBalance","abs","calcPmtVals","startBal","minPmt","int","max","prin","min","selectAdjPmtValues","adjVals","length","cPmt","push","selectBasePmtValues","pmtsArr","lastVals","selectInterestSavings","baseVals","map","pv","i","AddPrincipalInputs","addPrinInput","pltPs","dispatch","FormControl","fullWidth","InputLabel","Input","type","value","onChange","e","parseFloat","target","startAdornment","InputAdornment","position","endAdornment","Grid","item","container","FormLabel","RadioGroup","FormControlLabel","control","Radio","label","checked","Checkbox","PlotParamInputs","bal","remMoPmts","minMoPmt","minMoPmtTxt","toFixed","spacing","xs","inputProps","step","TextField","parseInt","Divider","Sidebar","Paper","elevation","style","padding","PlotViews","baseData","dataTs","intSave","xvals","Array","from","keys","cumPlotData","x","y","d","reduce","arr","monthlyPlotData","concat","data","line","color","dash","generateBasePmtCumTraces","acc","generateBasePmtMoTraces","config","displayModeBar","layout","width","title","xaxis","yaxis","PaymentTable","monthlyData","currency","n","TableContainer","component","Table","size","TableHead","TableRow","TableCell","TableBody","TabView","children","index","DataViews","useState","tabIdx","setTabIdx","Tabs","_","nv","Tab","App","AppBar","Toolbar","Typography","variant","flexGrow","href","GitHub","fontSize","Container","md","store","configureStore","reducer","plotParamsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab5bb29f.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport enum AddPrinMode {\n\tSTATIC = 'STATIC',\n\tPRIN_PERCENT = 'PRIN_PERCENT',\n\tPMT_PERCENT = 'PMT_PERCENT'\n}\n\n// Add cmpToBase boolean flag\nexport interface PlotParams {\n\tbalance: number,\n\tintRate: number,\n\tremMoPmt: number,\n\taddPrinMode: AddPrinMode,\n\taddPrinPct: number,\n\taddPrinAmt: number,\n\tcmpToBase: boolean,\n}\n\nconst initialState: PlotParams = {\n\tbalance: 300000,\n\tintRate: 3.25,\n\tremMoPmt: 360,\n\taddPrinMode: AddPrinMode.PRIN_PERCENT,\n\taddPrinPct: 0,\n\taddPrinAmt: 0,\n\tcmpToBase: false,\n};\n\nexport const plotParamsSlice = createSlice({\n\tname: 'plotParams',\n\tinitialState,\n\treducers: {\n\t\tsetBalance: (state, action: PayloadAction<number>) => {\n\t\t\tstate.balance = action.payload;\n\t\t},\n\t\tsetIntRate: (state, action: PayloadAction<number>) => {\n\t\t\tstate.intRate = action.payload;\n\t\t},\n\t\tsetRemMoPmts: (state, action: PayloadAction<number>) => {\n\t\t\tstate.remMoPmt = action.payload;\n\t\t},\n\t\tsetAddPrinMode: (state, action: PayloadAction<AddPrinMode>) => {\n\t\t\tstate.addPrinMode = action.payload;\n\t\t},\n\t\tsetAddPrinPct: (state, action: PayloadAction<number>) => {\n\t\t\tstate.addPrinPct = action.payload;\n\t\t},\n\t\tsetAddPrinAmt: (state, action: PayloadAction<number>) => {\n\t\t\tstate.addPrinAmt = action.payload;\n\t\t},\n\t\tsetCmpToBase: (state, action: PayloadAction<boolean>) => {\n\t\t\tstate.cmpToBase = action.payload;\n\t\t},\n\t}\n});\n\nexport const {\n\tsetBalance,\n\tsetIntRate,\n\tsetRemMoPmts,\n\tsetAddPrinMode,\n\tsetAddPrinPct,\n\tsetAddPrinAmt,\n\tsetCmpToBase,\n} = plotParamsSlice.actions;\n\nexport const selectPlotParams = (state: RootState) => state.plotParams;\n\nexport const selectBalance = (state: RootState) => state.plotParams.balance;\n\nexport const selectIntRate = (state: RootState) => state.plotParams.intRate;\n\nexport const selectRemMoPmts = (state: RootState) => state.plotParams.remMoPmt;\n\nexport const selectPrinMode = (state: RootState) => state.plotParams.addPrinMode;\n\nexport const selectPrinPct = (state: RootState) => state.plotParams.addPrinPct;\n\nexport const selectPrinAmt = (state: RootState) => state.plotParams.addPrinAmt;\n\nexport const selectCmpToBase = (state: RootState) => state.plotParams.cmpToBase;\n\nexport const selectMinMonthlyPmt = (state: RootState) => {\n\tconst params = state.plotParams;\n\tconst moInt = params.intRate / 100 / 12;\n\treturn params.balance * (moInt * Math.pow(moInt + 1, params.remMoPmt)) / (Math.pow(1 + moInt, params.remMoPmt) - 1)\n}\n\nexport interface PmtValues {\n\tstartBalance: number,\n\tendBalance: number,\n\tprincipal: number,\n\tinterest: number\n}\n\nfunction assessAddlPrincipal(basePmtVals: PmtValues, params: PlotParams): PmtValues {\n\tconst addlPmt = Object.assign({}, basePmtVals);\n\n\tlet addlPrin = 0;\n\tif (params.addPrinMode === AddPrinMode.STATIC) {\n\t\taddlPrin = params.addPrinAmt;\n\t} else if (params.addPrinMode === AddPrinMode.PRIN_PERCENT) {\n\t\taddlPrin = ((params.addPrinPct / 100) * basePmtVals.principal)\n\t} else if (params.addPrinMode === AddPrinMode.PMT_PERCENT) {\n\t\taddlPrin = ((params.addPrinPct / 100) * (basePmtVals.principal + basePmtVals.interest))\n\t}\n\n\taddlPmt.principal += addlPrin;\n\taddlPmt.endBalance = basePmtVals.startBalance - addlPmt.principal;\n\n\tif (addlPmt.endBalance < 0) {\n\t\taddlPmt.principal = addlPmt.principal - Math.abs(addlPmt.endBalance);\n\t\taddlPmt.endBalance = 0;\n\t}\n\n\treturn addlPmt;\n}\n\nfunction calcPmtVals(startBal: number, intRate: number, minPmt: number): PmtValues {\n\tconst moInt = intRate / 100 / 12;\n\tconst int = Math.max(0, startBal * moInt);\n\tconst prin = Math.min(startBal, minPmt - int);\n\n\treturn {\n\t\tstartBalance: startBal,\n\t\tendBalance: startBal - prin,\n\t\tprincipal: prin,\n\t\tinterest: int\n\t};\n}\n\nexport const selectAdjPmtValues = (state: RootState): PmtValues[] => {\n\tconst minPmt = selectMinMonthlyPmt(state);\n\tconst params = state.plotParams;\n\tconst adjVals = [ assessAddlPrincipal(calcPmtVals(params.balance, params.intRate, minPmt), params) ];\n\t\n\twhile(adjVals[adjVals.length - 1].endBalance >= 0.01) {\n\t\tconst cPmt = calcPmtVals(adjVals[adjVals.length - 1].endBalance, params.intRate, minPmt);\n\t\tcPmt.startBalance = adjVals[adjVals.length - 1].endBalance;\n\t\tadjVals.push(assessAddlPrincipal(cPmt, state.plotParams));\n\t}\n\n\treturn adjVals;\n}\n\nexport const selectBasePmtValues = (state: RootState): PmtValues[] => {\n\tconst minPmt = selectMinMonthlyPmt(state);\n\tconst params = state.plotParams;\n\tconst pmtsArr: PmtValues[] = [ calcPmtVals(params.balance, params.intRate, minPmt) ];\n\n\twhile  (pmtsArr[pmtsArr.length - 1].endBalance >= 0.01) {\n\t\tconst lastVals = pmtsArr[pmtsArr.length - 1];\n\t\tpmtsArr.push(calcPmtVals(lastVals.endBalance, params.intRate, minPmt));\n\t}\n\treturn pmtsArr;\n}\n\nexport const selectInterestSavings = (state: RootState): number[] => {\n\tconst baseVals = selectBasePmtValues(state);\n\tconst adjVals = selectAdjPmtValues(state);\n\n\treturn baseVals.map((pv, i) => (i < adjVals.length) ? pv.interest - adjVals[i].interest : pv.interest)\n}\n\nexport default plotParamsSlice.reducer;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { \n\tCheckbox,\n\tDivider,\n\tFormControl,\n\tFormControlLabel,\n\tFormLabel,\n\tGrid,\n\tInput,\n\tInputAdornment,\n\tInputLabel,\n\tPaper,\n\tRadio,\n\tRadioGroup,\n\tTextField\n} from '@material-ui/core';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\nimport {\n\tselectBalance,\n\tselectIntRate, \n\tselectRemMoPmts,\n\tselectMinMonthlyPmt,\n\tsetBalance,\n\tsetIntRate,\n\tsetRemMoPmts,\n\tAddPrinMode,\n\tselectPlotParams,\n\tsetAddPrinAmt,\n\tsetAddPrinMode,\n\tsetAddPrinPct,\n\tsetCmpToBase\n} from '../features/plotParams/plotParamsSlice';\n\n\nconst AddPrincipalInputs: React.FC = () => {\n  const pltPs = useAppSelector(selectPlotParams);\n  const dispatch = useAppDispatch();\n\n  let addPrinInput;\n  if (pltPs.addPrinMode === AddPrinMode.STATIC) {\n    addPrinInput = <FormControl fullWidth>\n      <InputLabel>Extra Principal Each Month</InputLabel>\n      <Input \n        type=\"number\"\n        value={pltPs.addPrinAmt}\n        onChange={e => dispatch(setAddPrinAmt(parseFloat(e.target.value)))}\n        startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n      />\n    </FormControl>\n  } else {\n    addPrinInput = <FormControl fullWidth>\n      <InputLabel>\n        Extra Principal as Percent of {pltPs.addPrinMode === AddPrinMode.PRIN_PERCENT ? 'Principal' : 'Total'}\n      </InputLabel>\n      <Input \n        type=\"number\"\n        value={pltPs.addPrinPct}\n        onChange={e => dispatch(setAddPrinPct(parseFloat(e.target.value)))}\n        endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n      />\n    </FormControl>\n  }\n\n  const addPrinModeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setAddPrinMode((AddPrinMode as any)[e.target.value]));\n  };\n\n  return (\n    <Grid item container>\n      <Grid item>\n        <FormControl>\n          <FormLabel>Additional Principal Mode</FormLabel>\n          <RadioGroup onChange={addPrinModeChange}>\n            <FormControlLabel\n              control={<Radio />}\n              label=\"Percent of Principal\"\n              value={AddPrinMode.PRIN_PERCENT}\n              checked={pltPs.addPrinMode === AddPrinMode.PRIN_PERCENT}\n            />\n            <FormControlLabel\n              control={<Radio />}\n              label=\"Percent of Min Pmt\"\n              value={AddPrinMode.PMT_PERCENT}\n              checked={pltPs.addPrinMode === AddPrinMode.PMT_PERCENT}\n            />\n            <FormControlLabel\n              control={<Radio />}\n              label=\"Static Amount\"\n              value={AddPrinMode.STATIC}\n              checked={pltPs.addPrinMode === AddPrinMode.STATIC}\n            />\n          </RadioGroup>\n        </FormControl>\n        {addPrinInput}\n        <FormControlLabel\n          control={\n            <Checkbox \n              checked={pltPs.cmpToBase} \n              onChange={(e) => dispatch(setCmpToBase(e.target.checked))} \n            />}\n          label=\"Compare Min Payment Sch.\"\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nconst PlotParamInputs: React.FC = () => {\n  const bal = useAppSelector(selectBalance);\n  const intRate = useAppSelector(selectIntRate);\n  const remMoPmts = useAppSelector(selectRemMoPmts);\n  const minMoPmt = useAppSelector(selectMinMonthlyPmt);\n\n  const minMoPmtTxt = minMoPmt ? minMoPmt.toFixed(2) : '--.--'\n\n  const dispatch = useAppDispatch();\n\n  const updateBalance = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setBalance(parseFloat(e.target.value)));\n  };\n\n  const updateIntRate = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setIntRate(parseFloat(e.target.value)));\n  };\n\n  const updateNumPmts = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setRemMoPmts(parseInt(e.target.value)));\n  };\n\n  return (\n\t\t<Grid container spacing={2}>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<FormControl fullWidth>\n\t\t\t\t\t<InputLabel>Balance</InputLabel>\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tinputProps={{step: \"1000\"}}\n\t\t\t\t\t\tvalue={bal}\n\t\t\t\t\t\tonChange={updateBalance}\n\t\t\t\t\t\tstartAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n\t\t\t\t\t/>\n\t\t\t\t</FormControl>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<FormControl fullWidth>\n\t\t\t\t\t<InputLabel>Annual Interest Rate</InputLabel>\n\t\t\t\t\t<Input\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tvalue={intRate}\n\t\t\t\t\t\tonChange={updateIntRate}\n\t\t\t\t\t\tendAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n\t\t\t\t\t/>\n\t\t\t\t</FormControl>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<TextField\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tvalue={remMoPmts}\n\t\t\t\t\tonChange={updateNumPmts}\n\t\t\t\t\tlabel=\"Remaining Monthly Payments\"\n\t\t\t\t\tfullWidth\n\t\t\t\t/>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<Divider />\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<div>Min Monthly Payment: ${minMoPmtTxt}</div>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<Divider />\n\t\t\t</Grid>\n\t\t\t<Grid item xs={12}>\n\t\t\t\t<AddPrincipalInputs />\n\t\t\t</Grid>\n\t\t</Grid>\n\n  );\n};\n\nexport const Sidebar: React.FC = () => {\n\treturn (\n\t\t<Paper elevation={2} style={{padding: \"10px\"}}>\n\t\t\t<PlotParamInputs />\n\t\t</Paper>\n\t);\n}","import {\n\tGrid,\n\tPaper,\n\tTableContainer,\n\tTable,\n\tTableHead,\n\tTableRow,\n\tTableCell,\n\tTableBody,\n\tTabs,\n\tTab\n} from '@material-ui/core';\nimport React, { useState } from 'react'\nimport Plot from 'react-plotly.js';\nimport { useAppSelector } from '../app/hooks';\nimport {\n\tselectAdjPmtValues,\n\tselectBasePmtValues,\n\tselectBalance,\n\tselectCmpToBase,\n\tPmtValues,\n\tselectInterestSavings\n}\nfrom '../features/plotParams/plotParamsSlice';\n\nfunction generateBasePmtCumTraces(data: PmtValues[]): Plotly.Data[] {\n\tconst xvals = Array.from(Array(data.length).keys())\n\t\n\treturn [\n\t\t{\n      x: xvals,\n      y: data.map(d => d.startBalance),\n      name: 'Base Balance',\n\t\t\tline: {\n\t\t\t\tcolor: '#1f77b4',\n\t\t\t\tdash: 'dash'\n\t\t\t},\n    },\n    {\n      x: xvals,\n\t\t\ty: data.reduce(\n\t\t\t\t(arr: number[], pv: PmtValues): number[] => {\n\t\t\t\t\tarr.push(arr[arr.length-1] + pv.interest);\n\t\t\t\t\treturn arr;\n\t\t\t\t},\n\t\t\t\t[0] \n\t\t\t),\n      name: 'Base Cum. Interest',\n\t\t\tline: {\n\t\t\t\tcolor: '#ff7f0e',\n\t\t\t\tdash: 'dash'\n\t\t\t},\n    },\n    {\n      x: xvals,\n      y: data.reduce(\n\t\t\t\t(arr: number[], pv: PmtValues): number[] => {\n\t\t\t\t\tarr.push(arr[arr.length-1] + pv.principal);\n\t\t\t\t\treturn arr;\n\t\t\t\t},\n\t\t\t\t[0] \n\t\t\t),\n      name: 'Base Cum. Principal',\n\t\t\tline: {\n\t\t\t\tcolor: '#2ca02c',\n\t\t\t\tdash: 'dash'\n\t\t\t},\n    },\n\t];\n}\n\nfunction generateBasePmtMoTraces(data: PmtValues[]): Plotly.Data[] {\n\tconst xvals = Array.from(Array(data.length).keys())\n\t\n\treturn [\n\t\t{\n      x: xvals,\n      y: data.map(d => d.principal + d.interest),\n      name: 'Base Total Payment',\n\t\t\tline: {\n\t\t\t\tcolor: '#1f77b4',\n\t\t\t\tdash: 'dash'\n\t\t\t},\n    },\n    {\n      x: xvals,\n      y: data.map(d => d.interest),\n      name: 'Base Interest',\n\t\t\tline: {\n\t\t\t\tcolor: '#ff7f0e',\n\t\t\t\tdash: 'dash'\n\t\t\t},\n    },\n    {\n      x: xvals,\n      y: data.map(d => d.principal),\n      name: 'Base Principal',\n\t\t\tline: {\n\t\t\t\tcolor: '#2ca02c',\n\t\t\t\tdash: 'dash'\n\t\t\t},\n    },\n\t];\n}\n\nconst PlotViews: React.FC = () => {\n\tconst cmpToBase = useAppSelector(selectCmpToBase);\n\tconst baseData = useAppSelector(selectBasePmtValues);\n  const dataTs = useAppSelector(selectAdjPmtValues);\n\tconst intSave = useAppSelector(selectInterestSavings);\n  const xvals = Array.from(Array(dataTs.length).keys())\n\n  let cumPlotData: Plotly.Data[] = [\n    {\n      x: xvals,\n      y: dataTs.map(d => d.startBalance),\n      name: 'Balance'\n    },\n    {\n      x: xvals,\n\t\t\ty: dataTs.reduce(\n\t\t\t\t(arr: number[], pv: PmtValues): number[] => {\n\t\t\t\t\tarr.push(arr[arr.length-1] + pv.interest);\n\t\t\t\t\treturn arr;\n\t\t\t\t},\n\t\t\t\t[0] \n\t\t\t),\n      name: 'Cum. Interest'\n    },\n    {\n      x: xvals,\n      y: dataTs.reduce(\n\t\t\t\t(arr: number[], pv: PmtValues): number[] => {\n\t\t\t\t\tarr.push(arr[arr.length-1] + pv.principal);\n\t\t\t\t\treturn arr;\n\t\t\t\t},\n\t\t\t\t[0] \n\t\t\t),\n      name: 'Cum. Principal'\n    },\n  ];\n\n  let monthlyPlotData: Plotly.Data[] = [\n    {\n      x: xvals,\n      y: dataTs.map(d => d.principal + d.interest),\n      name: 'Total Payment'\n    },\n    {\n      x: xvals,\n      y: dataTs.map(d => d.interest),\n      name: 'Interest'\n    },\n    {\n      x: xvals,\n      y: dataTs.map(d => d.principal),\n      name: 'Principal'\n    },\n  ];\n\n\tif (cmpToBase) {\n\t\tcumPlotData = cumPlotData.concat(generateBasePmtCumTraces(baseData))\n\t\tcumPlotData.push(\n\t\t\t{\n\t\t\t\tx: Array.from(Array(intSave.length).keys()),\n\t\t\t\ty: intSave.reduce(\n\t\t\t\t\t\t(acc: number[], x: number): number[] => {\n\t\t\t\t\t\t\tacc.push(acc[acc.length - 1] + x)\n\t\t\t\t\t\t\treturn acc\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[0]\n\t\t\t\t\t),\n\t\t\t\tname: 'Cum. Interest Savings'\n\t\t\t}\n\t\t)\n\t\tmonthlyPlotData = monthlyPlotData.concat(generateBasePmtMoTraces(baseData))\n\t\tmonthlyPlotData.push(\n\t\t\t{\n\t\t\t\tx: Array.from(Array(intSave.length).keys()),\n\t\t\t\ty: intSave,\n\t\t\t\tname: 'Interest Savings'\n\t\t\t}\n\t\t)\n\t}\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item>\n        <Paper>\n          <Plot\n            config={{displayModeBar: false}}\n            data={cumPlotData}\n            layout={{\n\t\t\t\t\t\t\twidth: 800,\n              title: \"Cumulative Interest/Principal\",\n              xaxis: {\n                title: \"Months\"\n              },\n              yaxis: {\n                title: \"Dollars\"\n              }\n            }}\n          />\n        </Paper>\n      </Grid>\n      <Grid item>\n        <Paper>\n          <Plot\n            config={{displayModeBar: false}}\n            data={monthlyPlotData}\n            layout={{\n\t\t\t\t\t\t\twidth: 800,\n              title: \"Monthly Amounts\",\n              xaxis: {\n                title: \"Months\"\n              },\n              yaxis: {\n                title: \"Dollars\"\n              }\n            }}\n          />\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst PaymentTable: React.FC = () => {\n  const initBal = useAppSelector(selectBalance);\n  const monthlyData = useAppSelector(selectAdjPmtValues);\n\n  const currency = (n: number): string => '$' + n.toFixed(2)\n\n  return (\n    <TableContainer component={Paper}>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Month</TableCell>\n            <TableCell>Starting Balance</TableCell>\n            <TableCell>Payment</TableCell>\n            <TableCell>Principal</TableCell>\n            <TableCell>Interest</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {monthlyData.map((d, i) => {\n            return (\n              <TableRow>\n                <TableCell>{i}</TableCell>\n                <TableCell>{currency(d.startBalance)}</TableCell>\n                <TableCell>{currency(d.principal + d.interest)}</TableCell>\n                <TableCell>{currency(d.principal)}</TableCell>\n                <TableCell>{currency(d.interest)}</TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nconst TabView: React.FC<{children: React.ReactNode, index: number, value:number}> = \n  ({children, value, index}) => {\n    return (\n      <div>\n        {value === index && children}\n      </div>\n    );\n  }\n\nexport const DataViews: React.FC = () => {\n\tconst [tabIdx, setTabIdx] = useState(0);\n\n\treturn (\n\t\t<>\n\t\t\t<Tabs value={tabIdx} onChange={(_, nv) => setTabIdx(nv)}>\n\t\t\t\t<Tab label=\"Plots\" />\n\t\t\t\t<Tab label=\"Table\" />\n\t\t\t</Tabs>\n\t\t\t<TabView value={tabIdx} index={0}>\n\t\t\t\t<PlotViews />\n\t\t\t</TabView>\n\t\t\t<TabView value={tabIdx} index={1}>\n\t\t\t\t<PaymentTable />\n\t\t\t</TabView>\n\t\t</>\n\t);\n}","import { \n  AppBar,\n  Container,\n  Grid,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport { GitHub } from '@material-ui/icons';\nimport { Sidebar } from './views/Sidebar';\nimport { DataViews } from './views/DataViews';\n\n\nfunction App() {\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h4\" style={{flexGrow: 1}}>\n              Amortization Schedule Calculator\n          </Typography>\n          <a style={{color: \"white\"}} href=\"https://github.com/gfpeltier/amortization-calc\">\n            <GitHub fontSize=\"large\" />\n          </a>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n      <Container>\n        <Grid container spacing={2}>\n          <Grid item md={3}>\n            <Sidebar />\n          </Grid>\n          <Grid item md={9}>\n            <DataViews />\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport plotParamsReducer from '../features/plotParams/plotParamsSlice';\n\n\nexport const store = configureStore({\n  reducer: {\n    plotParams: plotParamsReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}