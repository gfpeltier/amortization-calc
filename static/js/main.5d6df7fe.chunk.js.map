{"version":3,"sources":["features/plotParams/plotParamsSlice.ts","app/hooks.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["AddPrinMode","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","balance","intRate","remMoPmt","addPrinMode","PRIN_PERCENT","addPrinPct","addPrinAmt","plotParamsSlice","createSlice","name","reducers","setBalance","state","action","payload","setIntRate","setRemMoPmts","setAddPrinMode","setAddPrinPct","setAddPrinAmt","actions","selectPlotParams","plotParams","selectBalance","selectIntRate","selectRemMoPmts","selectMinMonthlyPmt","params","moInt","Math","pow","selectTSValues","minPmt","balanceArr","principal","interest","totalInt","totalPrincipal","length","lastVals","pPmtAmt","STATIC","PMT_PERCENT","nextBal","push","slice","AddPrincipalInputs","addPrinInput","pltPs","dispatch","FormControl","fullWidth","InputLabel","Input","type","value","onChange","e","parseFloat","target","startAdornment","InputAdornment","position","endAdornment","Grid","item","container","FormLabel","RadioGroup","FormControlLabel","control","Radio","label","checked","PlotParamInputs","bal","remMoPmts","spacing","xs","inputProps","step","TextField","parseInt","Divider","CalcValues","minMoPmt","toFixed","PlotViews","dataTs","xvals","Array","from","keys","cumPlotData","x","y","map","d","monthlyPlotData","config","displayModeBar","data","layout","title","xaxis","yaxis","App","Container","md","store","configureStore","reducer","plotParamsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d6df7fe.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport enum AddPrinMode {\n\tSTATIC = 'STATIC',\n\tPRIN_PERCENT = 'PRIN_PERCENT',\n\tPMT_PERCENT = 'PMT_PERCENT'\n}\n\nexport interface PlotParams {\n\tbalance: number,\n\tintRate: number,\n\tremMoPmt: number,\n\taddPrinMode: AddPrinMode,\n\taddPrinPct: number,\n\taddPrinAmt: number,\n}\n\nconst initialState: PlotParams = {\n\tbalance: 300000,\n\tintRate: 3.25,\n\tremMoPmt: 360,\n\taddPrinMode: AddPrinMode.PRIN_PERCENT,\n\taddPrinPct: 0,\n\taddPrinAmt: 0,\n};\n\nexport const plotParamsSlice = createSlice({\n\tname: 'plotParams',\n\tinitialState,\n\treducers: {\n\t\tsetBalance: (state, action: PayloadAction<number>) => {\n\t\t\tstate.balance = action.payload;\n\t\t},\n\t\tsetIntRate: (state, action: PayloadAction<number>) => {\n\t\t\tstate.intRate = action.payload;\n\t\t},\n\t\tsetRemMoPmts: (state, action: PayloadAction<number>) => {\n\t\t\tstate.remMoPmt = action.payload;\n\t\t},\n\t\tsetAddPrinMode: (state, action: PayloadAction<AddPrinMode>) => {\n\t\t\tstate.addPrinMode = action.payload;\n\t\t},\n\t\tsetAddPrinPct: (state, action: PayloadAction<number>) => {\n\t\t\tstate.addPrinPct = action.payload;\n\t\t},\n\t\tsetAddPrinAmt: (state, action: PayloadAction<number>) => {\n\t\t\tstate.addPrinAmt = action.payload;\n\t\t},\n\t}\n});\n\nexport const {\n\tsetBalance,\n\tsetIntRate,\n\tsetRemMoPmts,\n\tsetAddPrinMode,\n\tsetAddPrinPct,\n\tsetAddPrinAmt\n} = plotParamsSlice.actions;\n\nexport const selectPlotParams = (state: RootState) => state.plotParams;\n\nexport const selectBalance = (state: RootState) => state.plotParams.balance;\n\nexport const selectIntRate = (state: RootState) => state.plotParams.intRate;\n\nexport const selectRemMoPmts = (state: RootState) => state.plotParams.remMoPmt;\n\nexport const selectPrinMode = (state: RootState) => state.plotParams.addPrinMode;\n\nexport const selectPrinPct = (state: RootState) => state.plotParams.addPrinPct;\n\nexport const selectPrinAmt = (state: RootState) => state.plotParams.addPrinAmt;\n\nexport const selectMinMonthlyPmt = (state: RootState) => {\n\tconst params = state.plotParams;\n\tconst moInt = params.intRate / 100 / 12;\n\treturn params.balance * (moInt * Math.pow(moInt + 1, params.remMoPmt)) / (Math.pow(1 + moInt, params.remMoPmt) - 1)\n}\n\nexport interface AggregateValues {\n\tbalance: number,\n\tinterest: number,\n\tprincipal: number,\n\ttotalInt: number,\n\ttotalPrincipal: number\n}\n\nexport const selectTSValues = (state: RootState) => {\n\tconst minPmt = selectMinMonthlyPmt(state);\n\tconst params = state.plotParams;\n\tconst moInt = params.intRate / 100 / 12;\n\tconst balanceArr: AggregateValues[] = [\n\t\t{\n\t\t\tbalance: params.balance,\n\t\t\tprincipal: minPmt - (params.balance * moInt),\n\t\t\tinterest: params.balance * moInt,\n\t\t\ttotalInt: 0,\n\t\t\ttotalPrincipal: 0\n\t\t}\n\t];\n\tlet i = 0;\n\twhile (balanceArr[balanceArr.length - 1].balance > 0) {\n\t\tconst lastVals = balanceArr[balanceArr.length - 1];\n\t\tconst interest = lastVals.balance * moInt\n\t\tlet pPmtAmt = minPmt - interest\n\t\tif (params.addPrinMode === AddPrinMode.STATIC) {\n\t\t\tpPmtAmt += params.addPrinAmt\n\t\t} else if (params.addPrinMode === AddPrinMode.PRIN_PERCENT) {\n\t\t\tpPmtAmt += ((params.addPrinPct / 100) * pPmtAmt)\n\t\t} else if (params.addPrinMode === AddPrinMode.PMT_PERCENT) {\n\t\t  pPmtAmt += ((params.addPrinPct / 100) * minPmt)\n\t\t}\n\t\tconst nextBal = lastVals.balance - pPmtAmt\n\t\tbalanceArr.push({\n\t\t\tbalance: nextBal,\n\t\t\tprincipal: pPmtAmt,\n\t\t\tinterest: interest,\n\t\t\ttotalInt: lastVals.totalInt + interest,\n\t\t\ttotalPrincipal: lastVals.totalPrincipal + pPmtAmt\n\t\t});\n\t\ti++;\n\t}\n\treturn balanceArr.slice(1, balanceArr.length);\n}\n\nexport default plotParamsSlice.reducer;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport Plot from 'react-plotly.js'\nimport { useAppSelector, useAppDispatch } from './app/hooks';\nimport { \n  Container,\n  Divider,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Grid,\n  Input,\n  InputAdornment,\n  InputLabel,\n  Radio,\n  RadioGroup,\n  TextField\n} from '@material-ui/core';\nimport {\n  AddPrinMode,\n  setAddPrinAmt,\n  setAddPrinPct,\n  setAddPrinMode,\n  setBalance,\n  selectBalance,\n  setIntRate,\n  selectIntRate,\n  selectPlotParams,\n  setRemMoPmts,\n  selectRemMoPmts,\n  selectMinMonthlyPmt,\n  selectTSValues\n} from './features/plotParams/plotParamsSlice';\nimport './App.css';\n\nconst AddPrincipalInputs: React.FC = () => {\n  const pltPs = useAppSelector(selectPlotParams);\n  const dispatch = useAppDispatch();\n\n  let addPrinInput;\n  if (pltPs.addPrinMode === AddPrinMode.STATIC) {\n    addPrinInput = <FormControl fullWidth>\n      <InputLabel>Extra Principal Each Month</InputLabel>\n      <Input \n        type=\"number\"\n        value={pltPs.addPrinAmt}\n        onChange={e => dispatch(setAddPrinAmt(parseFloat(e.target.value)))}\n        startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n      />\n    </FormControl>\n  } else {\n    addPrinInput = <FormControl fullWidth>\n      <InputLabel>\n        Extra Principal as Percent of {pltPs.addPrinMode === AddPrinMode.PRIN_PERCENT ? 'Principal' : 'Total'}\n      </InputLabel>\n      <Input \n        type=\"number\"\n        value={pltPs.addPrinPct}\n        onChange={e => dispatch(setAddPrinPct(parseFloat(e.target.value)))}\n        endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n      />\n    </FormControl>\n  }\n\n  const addPrinModeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setAddPrinMode((AddPrinMode as any)[e.target.value]));\n  };\n\n  return (\n    <Grid item container>\n      <Grid item>\n        <FormControl>\n          <FormLabel>Additional Principal Mode</FormLabel>\n          <RadioGroup onChange={addPrinModeChange}>\n            <FormControlLabel\n              control={<Radio />}\n              label=\"Percent of Principal\"\n              value={AddPrinMode.PRIN_PERCENT}\n              checked={pltPs.addPrinMode === AddPrinMode.PRIN_PERCENT}\n            />\n            <FormControlLabel\n              control={<Radio />}\n              label=\"Percent of Min Pmt\"\n              value={AddPrinMode.PMT_PERCENT}\n              checked={pltPs.addPrinMode === AddPrinMode.PMT_PERCENT}\n            />\n            <FormControlLabel\n              control={<Radio />}\n              label=\"Static Amount\"\n              value={AddPrinMode.STATIC}\n              checked={pltPs.addPrinMode === AddPrinMode.STATIC}\n            />\n          </RadioGroup>\n        </FormControl>\n        {addPrinInput}\n      </Grid>\n    </Grid>\n  );\n}\n\nconst PlotParamInputs: React.FC = () => {\n  const bal = useAppSelector(selectBalance);\n  const intRate = useAppSelector(selectIntRate);\n  const remMoPmts = useAppSelector(selectRemMoPmts);\n\n  const dispatch = useAppDispatch();\n\n  const updateBalance = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setBalance(parseFloat(e.target.value)));\n  };\n\n  const updateIntRate = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setIntRate(parseFloat(e.target.value)));\n  };\n\n  const updateNumPmts = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setRemMoPmts(parseInt(e.target.value)));\n  };\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n        <FormControl fullWidth>\n          <InputLabel>Balance</InputLabel>\n          <Input \n            type=\"number\"\n            inputProps={{step: \"1000\"}}\n            value={bal}\n            onChange={updateBalance}\n            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n          />\n        </FormControl>\n      </Grid>\n      <Grid item xs={12}>\n        <FormControl fullWidth>\n          <InputLabel>Annual Interest Rate</InputLabel>\n          <Input \n            type=\"number\"\n            value={intRate}\n            onChange={updateIntRate}\n            endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n          />\n        </FormControl>\n      </Grid>\n      <Grid item xs={12}>\n        <TextField \n          type=\"number\"\n          value={remMoPmts}\n          onChange={updateNumPmts}\n          label=\"Remaining Monthly Payments\" \n          fullWidth\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <AddPrincipalInputs />\n      </Grid>\n      <Grid item xs={12}>\n        <Divider />\n      </Grid>\n    </Grid>\n  );\n};\n\nconst CalcValues: React.FC = () => {\n  const minMoPmt = useAppSelector(selectMinMonthlyPmt);\n\n  return (\n    <Grid container spacing={2}>\n      <h4>Min Monthly Pmt: ${minMoPmt.toFixed(2)}</h4>\n    </Grid>\n  );\n}\n\nconst PlotViews: React.FC = () => {\n  const dataTs = useAppSelector(selectTSValues);\n  const xvals = Array.from(Array(dataTs.length).keys())\n\n  const cumPlotData: Plotly.Data[] = [\n    {\n      x: xvals,\n      y: dataTs.map(d => d.balance),\n      name: 'Balance'\n    },\n    {\n      x: xvals,\n      y: dataTs.map(d => d.totalInt),\n      name: 'Cum. Interest'\n    },\n    {\n      x: xvals,\n      y: dataTs.map(d => d.totalPrincipal),\n      name: 'Cum. Pricipal'\n    },\n  ];\n\n  const monthlyPlotData: Plotly.Data[] = [\n    {\n      x: xvals,\n      y: dataTs.map(d => d.principal),\n      name: 'Principal'\n    },\n    {\n      x: xvals,\n      y: dataTs.map(d => d.interest),\n      name: 'Interest'\n    },\n    {\n      x: xvals,\n      y: dataTs.map(d => d.principal + d.interest),\n      name: 'Total Payment'\n    },\n  ];\n\n  return (\n    <Grid container>\n      <Plot\n        config={{displayModeBar: false}}\n        data={cumPlotData}\n        layout={{\n          title: \"Cumulative Interest/Pricipal\",\n          xaxis: {\n            title: \"Months\"\n          },\n          yaxis: {\n            title: \"Dollars\"\n          }\n        }}\n      />\n      <Plot\n        config={{displayModeBar: false}}\n        data={monthlyPlotData}\n        layout={{\n          title: \"Monthly Amounts\",\n          xaxis: {\n            title: \"Months\"\n          },\n          yaxis: {\n            title: \"Dollars\"\n          }\n        }}\n      />\n    </Grid>\n  );\n}\n\nfunction App() {\n  return (\n    <Container>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <h2>Amortization Schedule Calculator</h2>\n        </Grid>\n        <Grid item container md={3}>\n          <Grid item xs={12}>\n            <PlotParamInputs />\n          </Grid>\n          <Grid item xs={12}>\n            <CalcValues />\n          </Grid>\n        </Grid>\n        <Grid item md={9}>\n          <PlotViews />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport plotParamsReducer from '../features/plotParams/plotParamsSlice';\n\n\nexport const store = configureStore({\n  reducer: {\n    plotParams: plotParamsReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}